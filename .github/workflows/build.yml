name: 剪映专业版导出工具构建流程
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-windows:
    name: Build Windows EXE
    runs-on: windows-latest  # 必须使用Windows环境
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: 'pip'  # 启用缓存加速

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller==6.2.0
          pip install pywin32==306  # 解决Windows平台特定问题

      - name: 构建EXE文件
        id: build-exe
        run: |
          # 确保图标文件存在
          if not exist src\icon.ico (
            echo "::error::图标文件src/icon.ico不存在!"
            exit 1
          )

          # 执行PyInstaller构建
          pyinstaller \
            --onefile \
            --windowed \
            --icon=src\icon.ico \
            --add-data "src\icon.ico;." \
            --hidden-import=pkg_resources.py2_warn \
            --clean \
            src\main.py

          # 验证输出文件
          if not exist dist\main.exe (
            echo "::error::EXE文件生成失败!"
            exit 1
          )

          # 获取文件信息
          $exeInfo = (Get-Item dist\main.exe)
          echo "EXE文件大小: $($exeInfo.Length/1MB) MB"
          echo "::set-output name=exe_path::dist\main.exe"

      - name: 上传制品
        uses: actions/upload-artifact@v4
        with:
          name: jianying-exporter
          path: |
            dist\main.exe
            src\icon.ico
          retention-days: 7  # 自动清理旧制品

      - name: 创建发布版本 (可选)
        if: success() && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${GITHUB_RUN_NUMBER}
          files: |
            dist/main.exe
          body: |
            剪映专业版批量导出工具
            - 版本: ${GITHUB_RUN_NUMBER}
            - 构建日期: ${{ steps.get-date.outputs.date }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 添加Linux构建验证 (可选)
  build-linux-test:
    name: Test on Linux
    runs-on: ubuntu-latest
    needs: build-windows  # 依赖Windows构建成功
    
    steps:
      - uses: actions/checkout@v4
      
      - name: 测试Python脚本
        run: |
          python3 -m pip install -r requirements.txt
          python3 src/main.py --test
